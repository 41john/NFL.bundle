NFL_VIDEOS_JSON				= 'http://www.nfl.com/static/embeddablevideo/%s.json'
NFL_VIDEOS_URL				= 'http://a.video.nfl.com/'
NFL_NETWORK_SCHEDULE		= 'http://www.locatetv.com/listings/nflnet'
GAMEPASS_CONFIG				= 'https://www.nflgamepass.com/api/en/content/v1/web/config'
GAMEPASS_REDZONE			= 'https://www.nflgamepass.com/api/en/content/v1/web/redzone/videos'
GAMEPASS_NFLN				= 'https://www.nflgamepass.com/api/en/content/v1/web/network/data'
GIGYA_AUTH					= 'https://accounts.us1.gigya.com/accounts.login'
import uuid
import json
import urllib2
import ssl
####################################################################################################
def MetadataObjectForURL(url):
	
	if url.startswith("http://a.video.nfl.com"):
		new_url = url.split("#")
		streamid = new_url[1]
		json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)
		sTitle = json['briefHeadline']
		sSummary = json['caption']
		sThumb = json['imagePaths']['m']
		
		return VideoClipObject(
			title = sTitle,
			summary = sSummary,
			thumb = sThumb,
		)
#################################################
	elif url.startswith("http://static.now.nfl.com"):
		new_url = url.replace("jpg", "json")
		json = JSON.ObjectFromURL(new_url)
		sTitle = json['shortHeadline']
		sSummary = json['summary']
		sThumb = json['cdnData']['videoImageUrl']
	
		return VideoClipObject(
			title = sTitle,
			summary = sSummary,
			thumb = sThumb,
		)
#################################################
	else:
		if url.endswith("#NFLRL"):
			#NFL Redzone Live
			new_url = url.replace("#NFLRL", "")		
		elif url.endswith("#NFLRA"):
			#NFL Redzone Archive
			new_url = url.replace("#NFLRA", "")
		elif url.endswith("#NFLNA"):
			#NFL Gamepass Archived Show
			new_url = url.replace("#NFLNA", "")
		elif url.endswith("#NFLNL"):
			#NFL Gamepass NFL Network Live
			new_url = url.replace("#NFLNL", "")
		elif url.endswith("#NFLTEAMS"):
			#NFL Gamepass NFL Gamepass Teams
			new_url = url.replace("#NFLTEAMS", "")
		elif url.endswith("#Live"):
			#NFL Gamepass Live Game
			new_url = url.replace("#Live", "")
		elif url.endswith("#Condensed"):
			#NFL Gamepass Condensed Game
			new_url = url.replace("#Condensed", "")
		elif url.endswith("#CoachesFilm"):
			#NFL Gamepass Coaches Film
			new_url = url.replace("#CoachesFilm", "")
		else:
			#"NFL Gamepass Full Game
			new_url = url
		
		video_url = XML.ElementFromURL(new_url)
		titlevid = video_url.xpath('//video/description/text()')[0]
		return VideoClipObject(
			title = titlevid,
			summary = titlevid
		)

####################################################################################################
def MediaObjectsForURL(url):

	if url.startswith("http://a.video.nfl.com"):
		return [
			MediaObject(
				bitrate = 3000,
				video_resolution = '720',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '3000'))]				
			),
			MediaObject(
				bitrate = 2000,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '2000'))]				
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '1200'))]				
			),
			MediaObject(
				bitrate = 700,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '700'))]				
			),
			MediaObject(
				bitrate = 500, 
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '500'))]				
			)
		]

#################################################
	
	else:	
		return [
			MediaObject(
				bitrate = 4500,
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url)))]
				)
		]
		
####################################################################################################
def PlayVideo(url, bitrate):
	
	new_url = url.split("#")
	streamid = new_url[1]
	json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)

	mp4_url3000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-1]['path']
	mp4_url2000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-2]['path']
	mp4_url1200 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-3]['path']
	mp4_url700 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-4]['path']
	mp4_url500 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-5]['path']
	
	if bitrate == '3000':
		return Redirect(mp4_url3000)
	elif bitrate == '2000':
		return Redirect(mp4_url2000)
	elif bitrate == '1200':
		return Redirect(mp4_url1200)
	elif bitrate == '700':
		return Redirect(mp4_url700)
	elif bitrate == '500':
		return Redirect(mp4_url500)
	
####################################################################################################
@indirect
def PlayVideoGP(url):
	

	Log("Logging in")
	username = Prefs['username']
	password = Prefs['password']
	
	gigya_apikey = JSON.ObjectFromURL(GAMEPASS_CONFIG)['modules']['GIGYA']['JAVASCRIPT_API_URL'].replace("https://cdns.eu1.gigya.com/js/gigya.js?apiKey=","")
	gigya_post_values = {
		'apiKey' : gigya_apikey,
		'loginID' : username,
		'password' : password
		}		
	
	gigyalogin = JSON.ObjectFromURL(url=GIGYA_AUTH, values=gigya_post_values, cacheTime=0)
		
	UID = gigyalogin['UID']
	UIDSignature = gigyalogin['UIDSignature']
	signatureTimestamp = gigyalogin['signatureTimestamp']
	
	clientId = JSON.ObjectFromURL(GAMEPASS_CONFIG)['modules']['API']['CLIENT_ID']
	authentication_url = JSON.ObjectFromURL(GAMEPASS_CONFIG)['modules']['API']['LOGIN']
	post_values = {
		'client_id' : clientId,
 		'device_description' : 'iPhone',
        'device_id' : '',
        'device_type' : 'iOS',
        'errorCode' : '0',
        'grant_type' : 'shield_authentication',
        'password' : password,
        'signature' : UIDSignature,
        'ts' : signatureTimestamp,
 		'username' : username,
        'uuid' : UID
 		}

	login = JSON.ObjectFromURL(url=authentication_url, values=post_values, cacheTime=0)
	accessToken = login['access_token']
	
	if url.endswith("#NFLRL"):
		Log("NFL Redzone Live")
		new_url = url.replace("#NFLRL", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	elif url.endswith("#NFLRA"):
		Log("NFL Redzone Archive")
		new_url = url.replace("#NFLRA", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	elif url.endswith("#NFLNA"):
		Log("NFL Gamepass Archived Show")
		new_url = url.replace("#NFLNA", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	elif url.endswith("#NFLNL"):
		Log("NFL Gamepass NFL Network Live")
		new_url = url.replace("#NFLNL", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	elif url.endswith("#NFLTEAMS"):
		Log("NFL Gamepass Teams")
		new_url = url.replace("#NFLTEAMS", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	elif url.endswith("#Live"):
		Log("NFL Gamepass Live Game")
		new_url = url.replace("#Live", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	elif url.endswith("#Condensed"):
		Log("NFL Gamepass Condensed Game")
		new_url = url.replace("#Condensed", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	elif url.endswith("#CoachesFilm"):
		Log("NFL Gamepass Coaches Film")
		new_url = url.replace("#CoachesFilm", "")
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")	
	else:
		Log("NFL Gamepass Full Game")
		new_url = url
		videoId = new_url.replace("https://www.nflgamepass.com/api/en/content/v1/diva/", "")
	
	video_url = XML.ElementFromURL("https://www.nflgamepass.com/api/en/content/v1/diva/" + videoId)
	m3u8Url = video_url.xpath('//video/videoSources/videoSource[@format="ChromeCast"]/uri/text()')[0]
	post_values2 = {
		'Type' : '1',
		'User' : '',
		'VideoId' : videoId,
		'VideoSource' : m3u8Url,
		'VideoKind' : 'Video',
		'AssetState' : '3',
		'PlayerType' : 'HTML5',
		'other' : str(uuid.uuid4()) + '|' + accessToken + '|web|Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20WOW64%3B%20rv%3A54.0)%20Gecko%2F20100101%20Firefox%2F54.0|undefined|' +  username
	}
	publish_url = "https://www.nflgamepass.com/api/user/api/users/v1/videoentitlement/diva/open"
	data=json.dumps(post_values2)
	req=urllib2.Request(publish_url,data,{'Content-type':'application/json'})
	gcontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
	response=urllib2.urlopen(req, context=gcontext).read()
	json_response = JSON.ObjectFromString(response)
	final_m3u8_url = json_response['ContentUrl']
	
	return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(final_m3u8_url))