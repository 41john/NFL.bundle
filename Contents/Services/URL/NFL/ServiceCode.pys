NFL_VIDEOS_JSON				= 'http://www.nfl.com/static/embeddablevideo/%s.json'
NFL_VIDEOS_URL				= 'http://a.video.nfl.com/'
NFL_NETWORK_SCHEDULE		= 'http://www.locatetv.com/listings/nflnet'
####################################################################################################
def MetadataObjectForURL(url):
	
	if url.startswith("http://a.video.nfl.com"):
		new_url = url.split("#")
		streamid = new_url[1]
		json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)
		sTitle = json['briefHeadline']
		sSummary = json['caption']
		sThumb = json['imagePaths']['m']
		
		return VideoClipObject(
			title = sTitle,
			summary = sSummary,
			thumb = sThumb,
		)

#################################################
	if url.startswith("http://static.now.nfl.com"):
		new_url = url.replace("jpg", "json")
		json = JSON.ObjectFromURL(new_url)
		sTitle = json['shortHeadline']
		sSummary = json['summary']
		sThumb = json['cdnData']['videoImageUrl']
	
		return VideoClipObject(
			title = sTitle,
			summary = sSummary,
			thumb = sThumb,
		)

#################################################
	if url.startswith("http://nfl"):
		return VideoClipObject(
			title = "NFL Now Live"
		)
		
#################################################
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?nfln=true#Redzone"):
		return VideoClipObject(
        	title = "NFL Redzone"
    	)

#################################################
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?nfln=true"):
		
		page = HTML.ElementFromURL(NFL_NETWORK_SCHEDULE, errors='ignore', cacheTime=1)
		try:
			onnow = page.xpath('//ul[@class="nextOn clearFix"]/li[2]/div/a/text()')[0]
			timestarted = page.xpath('//ul[@class="nextOn clearFix"]/li[1]/text()')[0]
		except:
			onnow = ""
			timestarted = ""
		
		try:
			nextstarted = page.xpath('//ul[@class="schedule hoverable"]/li[3]/ul/li[1]/text()')[0]
			onnext = page.xpath('//ul[@class="schedule hoverable"]/li[3]/ul/li[2]/div/a/text()')[0]
		except:
			nextstarted = ""
			onnext = ""
		
		return VideoClipObject(
			title = "NFL Network",
    		summary = "Started at " + timestarted + " " + onnow + "\nNext at " + nextstarted +" " + onnext
     	)
     		
#################################################
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?rza="):
		return VideoClipObject(
        	title = "NFL Redzone Archive"
    	)

#################################################
	if url.startswith("http://gamepass.nfl.com"):
		return VideoClipObject(
        	title = "NFL Gamepass"
    	)

#################################################
	if url.startswith("http://gamerewind.nfl.com"):
		return VideoClipObject(
        	title = "NFL Game Rewind"
    	)

#################################################
	if url.startswith("http://nlds"):
	
		new_url = url.split("#")
		titlevid = new_url[1]
	
		return VideoClipObject(
        	title = titlevid
    	)

####################################################################################################
def MediaObjectsForURL(url):

	if Prefs['gplivebitrate'] == "4500":
		VidRes = '720'
	if Prefs['gplivebitrate'] == "3000":
		VidRes = '540'
	if Prefs['gplivebitrate'] == "2400":
		VidRes = '540'
	if Prefs['gplivebitrate'] == "1600":
		VidRes = '360'
	if Prefs['gplivebitrate'] == "1200":
		VidRes = '360'
	if Prefs['gplivebitrate'] == "800":
		VidRes = '224'
	if Prefs['gplivebitrate'] == "400":
		VidRes = '224'

	if url.startswith("http://a.video.nfl.com"):
		return [
			MediaObject(
				bitrate = 3000,
				video_resolution = '720',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '3000'))]				
			),
			MediaObject(
				bitrate = 2000,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '2000'))]				
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '1200'))]				
			),
			MediaObject(
				bitrate = 700,
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '700'))]				
			),
			MediaObject(
				bitrate = 500, 
				video_resolution = '432',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '500'))]				
			)
		]

#################################################

	if url.startswith("http://static.now.nfl.com"):
		return [
			MediaObject(
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNow, url = url)))]
			)
		]

#################################################

	if url.startswith("http://nfl"):
		return [
			MediaObject(
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNowLive, url = url)))]
			)
		]

#################################################
	
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?nfln=true#Live"):
		if Prefs['gplivebitrate'] == "Auto":
			return [
				MediaObject(
					bitrate = 4500,
					video_resolution = '720',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '4500')))]
				),
				MediaObject(
					bitrate = 3000,
					video_resolution = '540',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '3000')))]
				),
				MediaObject(
					bitrate = 2400,
					video_resolution = '540',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '2400')))]
			),
				MediaObject(
					bitrate = 1600,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '1600')))]
				),
				MediaObject(
					bitrate = 1200,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '1200')))]
				),
				MediaObject(
					bitrate = 800,
					video_resolution = '224',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '800')))]
				),
				MediaObject(
					bitrate = 400,
					video_resolution = '224',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = '400')))]
				)
			]
		else:
			return [
				MediaObject(
					bitrate = int(Prefs['gplivebitrate']),
					video_resolution = VidRes,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLN, url = url, bitrate = Prefs['gplivebitrate'])))]
				)
			]
			
#################################################
			
	if url.endswith("Live"):
		if Prefs['gplivebitrate'] == "Auto":
			return [
				MediaObject(
					bitrate = 4500,
					video_resolution = '720',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '4500')))]
				),
				MediaObject(
					bitrate = 3000,
					video_resolution = '540',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '3000')))]
				),
				MediaObject(
					bitrate = 2400,
					video_resolution = '540',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '2400')))]
			),
				MediaObject(
					bitrate = 1600,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1600')))]
				),
				MediaObject(
					bitrate = 1200,
					video_resolution = '360',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1200')))]
				),
				MediaObject(
					bitrate = 800,
					video_resolution = '224',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '800')))]
				),
				MediaObject(
					bitrate = 400,
					video_resolution = '224',
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '400')))]
				)
			]
		else:
			return [
				MediaObject(
					bitrate = int(Prefs['gplivebitrate']),
					video_resolution = VidRes,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = Prefs['gplivebitrate'])))]
				)
			]
	else:	
		return [
			MediaObject(
				bitrate = 4500,
				video_resolution = '720',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '4500')))]
				),
			MediaObject(
				bitrate = 3000,
				video_resolution = '540',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '3000')))]
			),
			MediaObject(
				bitrate = 2400,
				video_resolution = '540',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '2400')))]
			),
			MediaObject(
				bitrate = 1600,
				video_resolution = '360',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1600')))]
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = '360',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1200')))]
			),
			MediaObject(
				bitrate = 800,
				video_resolution = '224',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '800')))]
			),
			MediaObject(
				bitrate = 400,
				video_resolution = '224',
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '400')))]
			)
		]
		
####################################################################################################
def PlayVideo(url, bitrate):
	
	new_url = url.split("#")
	streamid = new_url[1]
	json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)

	mp4_url3000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-1]['path']
	mp4_url2000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-2]['path']
	mp4_url1200 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-3]['path']
	mp4_url700 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-4]['path']
	mp4_url500 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-5]['path']
	
	if bitrate == '3000':
		return Redirect(mp4_url3000)
	elif bitrate == '2000':
		return Redirect(mp4_url2000)
	elif bitrate == '1200':
		return Redirect(mp4_url1200)
	elif bitrate == '700':
		return Redirect(mp4_url700)
	elif bitrate == '500':
		return Redirect(mp4_url500)
	
####################################################################################################
@indirect
def PlayVideoGP(url, bitrate):
	
	if url.startswith("http://game"):
		Log("Logging in")
		username = Prefs['username']
		password = Prefs['password']
	
		if url.startswith("http://gamepass.nfl.com"):
			login_url = "https://gamepass.nfl.com/nflgp/secure/schedule"
		if url.startswith("http://gamerewind.nfl.com"):
			login_url = "https://gamerewind.nfl.com/nflgr/secure/schedule"
	
		authentication_url = "https://id.s.nfl.com/login"
		post_values = {
			'username' : username,
			'password' : password,
			'vendor_id' : 'nflptnrnln',
			'success_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule',
			'error_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule'
			}
	
		login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content
	
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?nfln=true"):
		Log("NFL Redzone Live")
		cookie_values = HTTP.CookiesForURL(url)	
		headers_value = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
		publish_url = "http://gamepass.nfl.com/nflgp/servlets/publishpoint"
		post_values1 = {
		'id' : '2',
		'type' : 'channel',
		'nt' : '1'
		}
		m3u8_pagedata = HTTP.Request(url=publish_url, values=post_values1, headers=headers_value).content
		m3u8_page = XML.ElementFromString(m3u8_pagedata)
		m3u8_url = m3u8_page.xpath('//path/text()')[0]
		m3u8_url4500 = m3u8_url.replace("adaptive","http").replace("iphone","4500")
		m3u8_url3000 = m3u8_url.replace("adaptive","http").replace("iphone","3000")
		m3u8_url2400 = m3u8_url.replace("adaptive","http").replace("iphone","2400")
		m3u8_url1600 = m3u8_url.replace("adaptive","http").replace("iphone","1600")
		m3u8_url1200 = m3u8_url.replace("adaptive","http").replace("iphone","1200")
		m3u8_url800 = m3u8_url.replace("adaptive","http").replace("iphone","800")
		m3u8_url400 = m3u8_url.replace("adaptive","http").replace("iphone","400")
				
	elif url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?rza="):
		Log("NFL Redzone Archive")
		cookie_values = HTTP.CookiesForURL(url)
		headers_value = {'Cookie' : cookie_values}
		date1 = url.replace("http://gamepass.nfl.com/nflgp/console.jsp?rza=", "")
		date2 = date1.replace("/","")
		if date2.startswith("2011"):
			season = "2011"	
		if date2.startswith("2012"):
			season = "2012"
		if date2.startswith("2013"):
			season = "2013"
		if date2.startswith("2014"):
			season = "2014"

		publish_url = "http://gamepass.nfl.com/nflgp/servlets/publishpoint"
		post_values2 = {
		'id' : '2',
		'type' : 'channel',
		'nt' : '1',
		'date1' : date1,
		'date2' : date2,
		'season' : season
		}
		headers_value2 = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
		m3u8_pagedata = HTTP.Request(url=publish_url, values=post_values2, headers=headers_value2).content
		m3u8_page = XML.ElementFromString(m3u8_pagedata)
		m3u8_url = m3u8_page.xpath('//path/text()')[0]
		m3u8_url4500 = m3u8_url.replace("adaptive","http").replace("iphone","4500")
		m3u8_url3000 = m3u8_url.replace("adaptive","http").replace("iphone","3000")
		m3u8_url2400 = m3u8_url.replace("adaptive","http").replace("iphone","2400")
		m3u8_url1600 = m3u8_url.replace("adaptive","http").replace("iphone","1600")
		m3u8_url1200 = m3u8_url.replace("adaptive","http").replace("iphone","1200")
		m3u8_url800 = m3u8_url.replace("adaptive","http").replace("iphone","800")
		m3u8_url400 = m3u8_url.replace("adaptive","http").replace("iphone","400")
	elif url.startswith("http://nlds"):
		Log("NFL Gamepass Archived Show")
		new_url = url.split("#")
		url = new_url[0]

		m3u8_url3000 = url.replace("pc.mp4","3000.mp4.m3u8")
		m3u8_url2400 = url.replace("pc.mp4","2400.mp4.m3u8")
		m3u8_url1600 = url.replace("pc.mp4","1600.mp4.m3u8")
		m3u8_url1200 = url.replace("pc.mp4","1200.mp4.m3u8")
		m3u8_url800 = url.replace("pc.mp4","800.mp4.m3u8")
		m3u8_url400 = url.replace("pc.mp4","400.mp4.m3u8")
	else:
		Log("NFL Gamepass/Rewind Game")
		new_url = url.replace("#Condensed", "").replace("#Live", "")
		cookie_values = HTTP.CookiesForURL(new_url)
		headers_value = {'Cookie' : cookie_values}
	
		if url.startswith("http://gamepass"):
			game_id = new_url.replace("http://gamepass.nfl.com/nflgp/console.jsp?eid=", "")
			games_url = "http://gamepass.nfl.com/nflgp/servlets/games"
		if url.startswith("http://gamerewind"):
			game_id = new_url.replace("http://gamerewind.nfl.com/nflgr/console.jsp?eid=", "")
			games_url = "http://gamerewind.nfl.com/nflgr/servlets/games"

		post_values1 = {
		'eid' : game_id,
		'isFlex' : 'true'
		}
		games_pagedata = HTTP.Request(url=games_url, values=post_values1, headers=headers_value).content
		games_page = XML.ElementFromString(games_pagedata)
		
		try:	
			for gamenum in range(1, 17):
				if games_page.xpath('//game[' + str(gamenum) + ']//elias/text()')[0] == game_id:
					live_game_id = games_page.xpath('//game[' + str(gamenum) + ']//id/text()')[0]
		except:
			Log("error obtaining live game id")
					
		if url.endswith("#Live"):
			post_values2 = {
			'id' : live_game_id,
			'type' : 'game',
			'nt' : '1',
			'gt' : 'live'
			}
		elif url.endswith("#Condensed"):
			post_values2 = {
			'id' : live_game_id,
			'type' : 'game',
			'nt' : '1',
			'gt' : 'condensed'
			}
		else:
			post_values2 = {
			'id' : live_game_id,
			'type' : 'game',
			'nt' : '1',
			'gt' : 'archive'
			}
	
		if url.startswith("http://gamepass"):
			publish_url = "http://gamepass.nfl.com/nflgp/servlets/publishpoint"
		else:
			publish_url = "http://gamerewind.nfl.com/nflgr/servlets/publishpoint"

		headers_value2 = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
		m3u8_pagedata = HTTP.Request(url=publish_url, values=post_values2, headers=headers_value2).content
		m3u8_page = XML.ElementFromString(m3u8_pagedata)
		m3u8_url = m3u8_page.xpath('//path/text()')[0]
		m3u8_url4500 = m3u8_url.replace("adaptive","http").replace("iphone","4500")
		m3u8_url3000 = m3u8_url.replace("adaptive","http").replace("iphone","3000")
		m3u8_url2400 = m3u8_url.replace("adaptive","http").replace("iphone","2400")
		m3u8_url1600 = m3u8_url.replace("adaptive","http").replace("iphone","1600")
		m3u8_url1200 = m3u8_url.replace("adaptive","http").replace("iphone","1200")
		m3u8_url800 = m3u8_url.replace("adaptive","http").replace("iphone","800")
		m3u8_url400 = m3u8_url.replace("adaptive","http").replace("iphone","400")
		
	if bitrate == '4500':
		try:
			headers = HTTP.Request(m3u8_url4500).headers
			return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url4500))	
		except:
			return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url3000))	
	elif bitrate == '3000':
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url3000))
	elif bitrate == '2400':
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url2400))
	elif bitrate == '1600':
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url1600))
	elif bitrate == '1200':
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url1200))
	elif bitrate == '800':
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url800))
	elif bitrate == '400':
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url400))

####################################################################################################
@indirect
def PlayVideoNFLN(url, bitrate):

	Log("Logging in")
	username = Prefs['username']
	password = Prefs['password']

	if url.startswith("http://gamepass.nfl.com"):
		login_url = "https://gamepass.nfl.com/nflgp/secure/schedule"
	if url.startswith("http://gamerewind.nfl.com"):
		login_url = "https://gamerewind.nfl.com/nflgr/secure/schedule"

	authentication_url = "https://id.s.nfl.com/login"
	post_values = {
		'username' : username,
		'password' : password,
		'vendor_id' : 'nflptnrnln',
		'success_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule',
		'error_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule'
		}

	login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content

	Log("NFL Network Live")
	cookie_values = HTTP.CookiesForURL(url)	
	headers_value = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
	publish_url = "http://gamepass.nfl.com/nflgp/servlets/publishpoint"
	post_values1 = {
	'id' : '1',
	'type' : 'channel',
	'nt' : '1'
	}
	m3u8_pagedata = HTTP.Request(url=publish_url, values=post_values1, headers=headers_value).content
	m3u8_page = XML.ElementFromString(m3u8_pagedata)
	m3u8_url = m3u8_page.xpath('//path/text()')[0]
	m3u8_url4500 = m3u8_url.replace("adaptive","http").replace("iphone","4500")
	m3u8_url3000 = m3u8_url.replace("adaptive","http").replace("iphone","3000")
	m3u8_url2400 = m3u8_url.replace("adaptive","http").replace("iphone","2400")
	m3u8_url1600 = m3u8_url.replace("adaptive","http").replace("iphone","1600")
	m3u8_url1200 = m3u8_url.replace("adaptive","http").replace("iphone","1200")
	m3u8_url800 = m3u8_url.replace("adaptive","http").replace("iphone","800")
	m3u8_url400 = m3u8_url.replace("adaptive","http").replace("iphone","400")
	
	if bitrate == '4500':
#		patched_playlist = CreatePatchedPlaylist(m3u8_url4500)
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url4500))
	elif bitrate == '3000':
#		patched_playlist = CreatePatchedPlaylist(m3u8_url3000)
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url3000))
	elif bitrate == '2400':
#		patched_playlist = CreatePatchedPlaylist(m3u8_url2400)
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url2400))
	elif bitrate == '1600':
#		patched_playlist = CreatePatchedPlaylist(m3u8_url1600)
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url1600))
	elif bitrate == '1200':
#		patched_playlist = CreatePatchedPlaylist(m3u8_url1200)
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url1200))
	elif bitrate == '800':
#		patched_playlist = CreatePatchedPlaylist(m3u8_url800)
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url800))
	elif bitrate == '400':
#		patched_playlist = CreatePatchedPlaylist(m3u8_url400)
		return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8_url400))

#	return (patched_playlist)
####################################################################################################
# Keeping this code and hoping to use it to fix NFL Network live for Samsung and Roku.
def CreatePatchedPlaylist(url):

    original_playlist = HTTP.Request(url).content
    new_playlist = ''
    for line in original_playlist.splitlines():
        if line.startswith('#EXT-X-VERSION:4'):
        	original_key_url = '#EXT-X-VERSION:4'
        	new_key_url = '#EXT-X-VERSION:2'
        	new_playlist = new_playlist + line.replace(original_key_url, new_key_url) + '\n'
        elif line.startswith('#EXT-X-KEY:METHOD=AES-128,URI="'):
        	original_key_url = '#EXT-X-KEY:METHOD=AES-128,URI="'
        	new_key_url = '#EXT-X-KEY:METHOD=AES-128,URI="http://nlds195.neulion.com:443/nlds/nfl/nfltv/as/live/'
        	new_playlist = new_playlist + line.replace(original_key_url, new_key_url) + '\n'
        elif line.startswith('nfltv_hd'):
        	original_key_url = 'nfltv_hd'
        	new_key_url = 'http://nlds195.cdnak.neulion.com/nlds/nfl/nfltv/as/live/nfltv_hd'
        	new_playlist = new_playlist + line.replace(original_key_url, new_key_url) + '\n'
        else:
        	new_playlist = new_playlist + line + '\n'

    Log(original_playlist)
    Log(new_playlist)
    return new_playlist
    
####################################################################################################
@indirect
def PlayVideoNFLNow(url):

	new_url = url.replace("jpg", "json")
	json = JSON.ObjectFromURL(new_url)
	m3u8 = json['cdnData']['videoUrl']
	return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8))
####################################################################################################
@indirect
def PlayVideoNFLNowLive(url):

	new_url = url.split("#")
	m3u8 = new_url[0]
	return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(m3u8))