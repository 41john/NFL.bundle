NFL_VIDEOS_JSON				= 'http://www.nfl.com/static/embeddablevideo/%s.json'
NFL_VIDEOS_URL				= 'http://a.video.nfl.com/'
####################################################################################################
def MetadataObjectForURL(url):
	
	if url.startswith("http://www.nfl.com"):

		page = HTML.ElementFromURL(url)
		streamid = page.xpath('//div[@id="video-hero-player"]')[0].get('data-ecmid')
		json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)
		sTitle = json['briefHeadline']
		sSummary = json['caption']
		sThumb = json['imagePaths']['m']
		
		return VideoClipObject(
			title = sTitle,
			summary = sSummary,
			thumb = sThumb,
		)

#################################################
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?nfln=true"):
		return VideoClipObject(
        	title = "NFL Network"
    	)

#################################################
	if url.startswith("http://gamepass.nfl.com"):
		return VideoClipObject(
        	title = "NFL Gamepass"
    	)

#################################################
	if url.startswith("http://gamerewind.nfl.com"):
		return VideoClipObject(
        	title = "NFL Game Rewind"
    	)

####################################################################################################
def MediaObjectsForURL(url):

	if url.startswith("http://www.nfl.com"):
		return [
			MediaObject(
				bitrate = 3000,
				video_resolution = 720,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '3000'))]				
			),
			MediaObject(
				bitrate = 2000,
				video_resolution = 432,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '2000'))]				
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = 432,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '1200'))]				
			),
			MediaObject(
				bitrate = 700,
				video_resolution = 432,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '700'))]				
			),
			MediaObject(
				bitrate = 500, 
				video_resolution = 432,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key=Callback(PlayVideo, url = url, bitrate = '500'))]				
			)
		]

#################################################
	
	if url.startswith("http://gamepass.nfl.com/nflgp/console.jsp?nfln=true"):
	
			return [
				MediaObject(
					bitrate = 4500,
					video_resolution = 720,
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNetwork, url = url, bitrate = '4500')))]
				),
				MediaObject(
					bitrate = 3000,
					video_resolution = 540,
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNetwork, url = url, bitrate = '3000')))]
				),
				MediaObject(
					bitrate = 2400,
					video_resolution = 540,
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNetwork, url = url, bitrate = '2400')))]
				),
				MediaObject(
					bitrate = 1600,
					video_resolution = 360,
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNetwork, url = url, bitrate = '1600')))]
				),
				MediaObject(
					bitrate = 1200,
					video_resolution = 360,
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNetwork, url = url, bitrate = '1200')))]
				),
				MediaObject(
					bitrate = 800,
					video_resolution = 224,
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNetwork, url = url, bitrate = '800')))]
				),
				MediaObject(
					bitrate = 400,
					video_resolution = 224,
					container = Container.MP4,
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoNFLNetwork, url = url, bitrate = '400')))]
				)
			]
			
#################################################
	
	if url.startswith("http://gamepass.nfl.com"):
		return [
			MediaObject(
				bitrate = 4500,
				video_resolution = 720,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '4500')))]
			),
			MediaObject(
				bitrate = 3000,
				video_resolution = 540,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '3000')))]
			),
			MediaObject(
				bitrate = 2400,
				video_resolution = '540',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '2400')))]
			),
			MediaObject(
				bitrate = 1600,
				video_resolution = 360,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1600')))]
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = 360,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '1200')))]
			),
			MediaObject(
				bitrate = 800,
				video_resolution = 224,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '800')))]
			),
			MediaObject(
				bitrate = 400,
				video_resolution = 224,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGP, url = url, bitrate = '400')))]
			)
		]

#################################################
	
	if url.startswith("http://gamerewind.nfl.com"):
		return [
			MediaObject(
				bitrate = 4500,
				video_resolution = 720,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGR, url = url, bitrate = '4500')))]
			),
			MediaObject(
				bitrate = 3000,
				video_resolution = 540,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGR, url = url, bitrate = '3000')))]
			),
			MediaObject(
				bitrate = 2400,
				video_resolution = '540',
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGR, url = url, bitrate = '2400')))]
			),
			MediaObject(
				bitrate = 1600,
				video_resolution = 360,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGR, url = url, bitrate = '1600')))]
			),
			MediaObject(
				bitrate = 1200,
				video_resolution = 360,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGR, url = url, bitrate = '1200')))]
			),
			MediaObject(
				bitrate = 800,
				video_resolution = 224,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGR, url = url, bitrate = '800')))]
			),
			MediaObject(
				bitrate = 400,
				video_resolution = 224,
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [PartObject(key = HTTPLiveStreamURL(Callback(PlayVideoGR, url = url, bitrate = '400')))]
			)
		]

####################################################################################################
def PlayVideo(url, bitrate):

	page = HTML.ElementFromURL(url)
	streamid = page.xpath('//div[@id="video-hero-player"]')[0].get('data-ecmid')
	json = JSON.ObjectFromURL(NFL_VIDEOS_JSON % streamid)

	mp4_url3000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-1]['path']
	mp4_url2000 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-2]['path']
	mp4_url1200 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-3]['path']
	mp4_url700 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-4]['path']
	mp4_url500 = NFL_VIDEOS_URL + json['cdnData']['bitrateInfo'][-5]['path']
	
	if bitrate == '3000':
		return Redirect(mp4_url3000)
	elif bitrate == '2000':
		return Redirect(mp4_url2000)
	elif bitrate == '1200':
		return Redirect(mp4_url1200)
	elif bitrate == '700':
		return Redirect(mp4_url700)
	elif bitrate == '500':
		return Redirect(mp4_url500)
	
####################################################################################################
@indirect
def PlayVideoNFLNetwork(url, bitrate):
	
	username = Prefs['username']
	password = Prefs['password']
	
	login_url = "https://gamepass.nfl.com/nflgp/secure/schedule"
	
	authentication_url = "https://id.s.nfl.com/login"
	post_values = {
		'username' : username,
		'password' : password,
		'vendor_id' : 'nflptnrnln',
		'success_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule',
		'error_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule'
		}
	
	try:
 		needtologin = HTML.ElementFromURL(login_url, errors='ignore', cacheTime=0).xpath('//td[@class="tab"]/a')[0].get('href')
	except:
		needtologin = 'nothing'

	if needtologin == "loginform":
 		login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content
	
	cookie_values = HTTP.CookiesForURL(url)	
	headers_value = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
	publish_url = "http://gamepass.nfl.com/nflgp/servlets/publishpoint"
	post_values1 = {
	'id' : '1',
	'type' : 'channel',
	'nt' : '1'
	}
	m3u8_pagedata = HTTP.Request(url=publish_url, values=post_values1, headers=headers_value).content
	m3u8_page = XML.ElementFromString(m3u8_pagedata)
	m3u8_url = m3u8_page.xpath('//path/text()')[0]
	m3u8_url4500 = m3u8_url.replace("adaptive","http").replace("iphone","4500")
	m3u8_url3000 = m3u8_url.replace("adaptive","http").replace("iphone","3000")
	m3u8_url2400 = m3u8_url.replace("adaptive","http").replace("iphone","2400")
	m3u8_url1600 = m3u8_url.replace("adaptive","http").replace("iphone","1600")
	m3u8_url1200 = m3u8_url.replace("adaptive","http").replace("iphone","1200")
	m3u8_url800 = m3u8_url.replace("adaptive","http").replace("iphone","800")
	m3u8_url400 = m3u8_url.replace("adaptive","http").replace("iphone","400")
	
	if bitrate == '4500':
		return IndirectResponse(VideoClipObject, key = m3u8_url4500)	
	elif bitrate == '3000':
		return IndirectResponse(VideoClipObject, key = m3u8_url3000)	
	elif bitrate == '2400':
		return IndirectResponse(VideoClipObject, key = m3u8_url2400)	
	elif bitrate == '1600':
		return IndirectResponse(VideoClipObject, key = m3u8_url1600)	
	elif bitrate == '1200':
		return IndirectResponse(VideoClipObject, key = m3u8_url1200)	
	elif bitrate == '800':
		return IndirectResponse(VideoClipObject, key = m3u8_url800)	
	elif bitrate == '400':
		return IndirectResponse(VideoClipObject, key = m3u8_url400)	
	
####################################################################################################
@indirect
def PlayVideoGP(url, bitrate):
	
	new_url = url.replace("#Condensed", "").replace("#Live", "")
	
	username = Prefs['username']
	password = Prefs['password']
	
	login_url = "https://gamepass.nfl.com/nflgp/secure/schedule"
	
	authentication_url = "https://id.s.nfl.com/login"
	post_values = {
		'username' : username,
		'password' : password,
		'vendor_id' : 'nflptnrnln',
		'success_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule',
		'error_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule'
		}
	
	try:
 		needtologin = HTML.ElementFromURL(login_url, errors='ignore', cacheTime=0).xpath('//td[@class="tab"]/a')[0].get('href')
	except:
		needtologin = 'nothing'

	if needtologin == "loginform":
 		login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content

	cookie_values = HTTP.CookiesForURL(new_url)

	headers_value = {'Cookie' : cookie_values}

	game_id = new_url.replace("http://gamepass.nfl.com/nflgp/console.jsp?eid=", "")
	games_url = "http://gamepass.nfl.com/nflgp/servlets/games"
	post_values1 = {
	'eid' : game_id,
	'isFlex' : 'true'
	}
	games_pagedata = HTTP.Request(url=games_url, values=post_values1, headers=headers_value).content
	games_page = XML.ElementFromString(games_pagedata)

# lines below could probably be expressed much better without so much code?

	if url.endswith("#Condensed"):
		if games_page.xpath('//game[1]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[1]//condensedId/text()')[0]
		elif games_page.xpath('//game[2]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[2]//condensedId/text()')[0]
		elif games_page.xpath('//game[3]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[3]//condensedId/text()')[0]
		elif games_page.xpath('//game[4]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[4]//condensedId/text()')[0]
		elif games_page.xpath('//game[5]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[5]//condensedId/text()')[0]
		elif games_page.xpath('//game[6]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[6]//condensedId/text()')[0]
		elif games_page.xpath('//game[7]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[7]//condensedId/text()')[0]
		elif games_page.xpath('//game[8]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[8]//condensedId/text()')[0]
		elif games_page.xpath('//game[9]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[9]//condensedId/text()')[0]
		elif games_page.xpath('//game[10]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[10]//condensedId/text()')[0]
		elif games_page.xpath('//game[11]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[11]//condensedId/text()')[0]
		elif games_page.xpath('//game[12]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[12]//condensedId/text()')[0]
		elif games_page.xpath('//game[13]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[13]//condensedId/text()')[0]
		elif games_page.xpath('//game[14]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[14]//condensedId/text()')[0]
		elif games_page.xpath('//game[15]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[15]//condensedId/text()')[0]
		elif games_page.xpath('//game[16]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[16]//condensedId/text()')[0]
	
	else:
		if games_page.xpath('//game[1]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[1]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[1]//id/text()')[0]
		elif games_page.xpath('//game[2]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[2]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[2]//id/text()')[0]
		elif games_page.xpath('//game[3]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[3]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[3]//id/text()')[0]
		elif games_page.xpath('//game[4]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[4]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[4]//id/text()')[0]
		elif games_page.xpath('//game[5]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[5]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[5]//id/text()')[0]
		elif games_page.xpath('//game[6]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[6]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[6]//id/text()')[0]
		elif games_page.xpath('//game[7]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[7]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[7]//id/text()')[0]
		elif games_page.xpath('//game[8]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[8]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[8]//id/text()')[0]
		elif games_page.xpath('//game[9]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[9]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[9]//id/text()')[0]
		elif games_page.xpath('//game[10]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[10]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[10]//id/text()')[0]
		elif games_page.xpath('//game[11]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[11]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[11]//id/text()')[0]
		elif games_page.xpath('//game[12]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[12]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[12]//id/text()')[0]
		elif games_page.xpath('//game[13]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[13]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[13]//id/text()')[0]
		elif games_page.xpath('//game[14]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[14]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[14]//id/text()')[0]
		elif games_page.xpath('//game[15]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[15]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[15]//id/text()')[0]
		elif games_page.xpath('//game[16]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[16]//programId/text()')[0]
			live_game_id = games_page.xpath('//game[16]//id/text()')[0]
	
	if url.endswith("#Live"):		
		publish_url = "http://gamepass.nfl.com/nflgp/servlets/publishpoint"
		post_values2 = {
		'id' : live_game_id,
		'type' : 'game',
		'nt' : '1',
		'gt' : 'live'
		}
		headers_value2 = {'Cookie' : cookie_values, 'User-Agent' : 'iPhone'}
		m3u8_pagedata = HTTP.Request(url=publish_url, values=post_values2, headers=headers_value2).content
		m3u8_page = XML.ElementFromString(m3u8_pagedata)
		m3u8_url = m3u8_page.xpath('//path/text()')[0]
		m3u8_url4500 = m3u8_url.replace("adaptive","http").replace("iphone","4500")
		m3u8_url3000 = m3u8_url.replace("adaptive","http").replace("iphone","3000")
		m3u8_url2400 = m3u8_url.replace("adaptive","http").replace("iphone","2400")
		m3u8_url1600 = m3u8_url.replace("adaptive","http").replace("iphone","1600")
		m3u8_url1200 = m3u8_url.replace("adaptive","http").replace("iphone","1200")
		m3u8_url800 = m3u8_url.replace("adaptive","http").replace("iphone","800")
		m3u8_url400 = m3u8_url.replace("adaptive","http").replace("iphone","400")
		
	else:
		videopath_url = "http://gamepass.nfl.com/nflgp/servlets/encryptvideopath"
		post_values2 = {
		'path' : program_id,
		'type' : 'fgpa',
		'isFlex' : 'true'
		}
		
		videopath_pagedata = HTTP.Request(url=videopath_url, values=post_values2, headers=headers_value).content
		videopath_page = XML.ElementFromString(videopath_pagedata)

		m3u8_url = videopath_page.xpath('//path/text()')[0]
		m3u8_url = m3u8_url.split('?')[0]
		m3u8_url4500 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","4500.mp4.m3u8").replace("pc","4500.m3u8")
		m3u8_url3000 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","3000.mp4.m3u8").replace("pc","3000.m3u8")
		m3u8_url2400 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","2400.mp4.m3u8").replace("pc","2400.m3u8")
		m3u8_url1600 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","1600.mp4.m3u8").replace("pc","1600.m3u8")
		m3u8_url1200 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","1200.mp4.m3u8").replace("pc","1200.m3u8")
		m3u8_url800 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","800.mp4.m3u8").replace("pc","800.m3u8")
		m3u8_url400 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","400.mp4.m3u8").replace("pc","400.m3u8")
	
	if bitrate == '4500':
		try:
			headers = HTTP.Request(m3u8_url4500).headers
			return IndirectResponse(VideoClipObject, key = m3u8_url4500)	
		except:
			return IndirectResponse(VideoClipObject, key = m3u8_url3000)	
	elif bitrate == '3000':
		return IndirectResponse(VideoClipObject, key = m3u8_url3000)
	elif bitrate == '2400':
		return IndirectResponse(VideoClipObject, key = m3u8_url2400)
	elif bitrate == '1600':
		return IndirectResponse(VideoClipObject, key = m3u8_url1600)
	elif bitrate == '1200':
		return IndirectResponse(VideoClipObject, key = m3u8_url1200)
	elif bitrate == '800':
		return IndirectResponse(VideoClipObject, key = m3u8_url800)
	elif bitrate == '400':
		return IndirectResponse(VideoClipObject, key = m3u8_url400)

####################################################################################################
@indirect
def PlayVideoGR(url, bitrate):
	
	new_url = url.replace("#Condensed", "").replace("#Live", "")
	
	username = Prefs['username']
	password = Prefs['password']
	
	login_url = "https://gamerewind.nfl.com/nflgr/secure/schedule"
	
	authentication_url = "https://id.s.nfl.com/login"
	post_values = {
		'username' : username,
		'password' : password,
		'vendor_id' : 'nflptnrnln',
		'success_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule',
		'error_url' : 'https://network.nfl.com/nfln/secure/login?redirect=schedule'
		}
	
	try:
 		needtologin = HTML.ElementFromURL(login_url, errors='ignore', cacheTime=0).xpath('//td[@class="tab"]/a')[0].get('href')
	except:
		needtologin = 'nothing'

	if needtologin == "loginform":
 		login = HTTP.Request(url=authentication_url, values=post_values, cacheTime=0).content

	cookie_values = HTTP.CookiesForURL(new_url)

	headers_value = {'Cookie' : cookie_values}

	game_id = new_url.replace("http://gamerewind.nfl.com/nflgr/console.jsp?eid=", "")
	games_url = "http://gamerewind.nfl.com/nflgr/servlets/games"
	post_values1 = {
	'eid' : game_id,
	'isFlex' : 'true'
	}
	games_pagedata = HTTP.Request(url=games_url, values=post_values1, headers=headers_value).content
	games_page = XML.ElementFromString(games_pagedata)

# lines below could probably be expressed much better without so much code?

	if url.endswith("#Condensed"):
		if games_page.xpath('//game[1]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[1]//condensedId/text()')[0]
		elif games_page.xpath('//game[2]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[2]//condensedId/text()')[0]
		elif games_page.xpath('//game[3]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[3]//condensedId/text()')[0]
		elif games_page.xpath('//game[4]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[4]//condensedId/text()')[0]
		elif games_page.xpath('//game[5]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[5]//condensedId/text()')[0]
		elif games_page.xpath('//game[6]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[6]//condensedId/text()')[0]
		elif games_page.xpath('//game[7]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[7]//condensedId/text()')[0]
		elif games_page.xpath('//game[8]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[8]//condensedId/text()')[0]
		elif games_page.xpath('//game[9]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[9]//condensedId/text()')[0]
		elif games_page.xpath('//game[10]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[10]//condensedId/text()')[0]
		elif games_page.xpath('//game[11]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[11]//condensedId/text()')[0]
		elif games_page.xpath('//game[12]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[12]//condensedId/text()')[0]
		elif games_page.xpath('//game[13]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[13]//condensedId/text()')[0]
		elif games_page.xpath('//game[14]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[14]//condensedId/text()')[0]
		elif games_page.xpath('//game[15]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[15]//condensedId/text()')[0]
		elif games_page.xpath('//game[16]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[16]//condensedId/text()')[0]
	
	else:
		if games_page.xpath('//game[1]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[1]//programId/text()')[0]
		elif games_page.xpath('//game[2]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[2]//programId/text()')[0]
		elif games_page.xpath('//game[3]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[3]//programId/text()')[0]
		elif games_page.xpath('//game[4]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[4]//programId/text()')[0]
		elif games_page.xpath('//game[5]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[5]//programId/text()')[0]
		elif games_page.xpath('//game[6]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[6]//programId/text()')[0]
		elif games_page.xpath('//game[7]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[7]//programId/text()')[0]
		elif games_page.xpath('//game[8]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[8]//programId/text()')[0]
		elif games_page.xpath('//game[9]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[9]//programId/text()')[0]
		elif games_page.xpath('//game[10]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[10]//programId/text()')[0]
		elif games_page.xpath('//game[11]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[11]//programId/text()')[0]
		elif games_page.xpath('//game[12]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[12]//programId/text()')[0]
		elif games_page.xpath('//game[13]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[13]//programId/text()')[0]
		elif games_page.xpath('//game[14]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[14]//programId/text()')[0]
		elif games_page.xpath('//game[15]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[15]//programId/text()')[0]
		elif games_page.xpath('//game[16]//elias/text()')[0] == game_id:
			program_id = games_page.xpath('//game[16]//programId/text()')[0]
	
	videopath_url = "http://gamerewind.nfl.com/nflgr/servlets/encryptvideopath"
	post_values2 = {
	'path' : program_id,
	'type' : 'fgpa',
	'isFlex' : 'true'
	}
		
	videopath_pagedata = HTTP.Request(url=videopath_url, values=post_values2, headers=headers_value).content
	videopath_page = XML.ElementFromString(videopath_pagedata)

	m3u8_url = videopath_page.xpath('//path/text()')[0]
	m3u8_url = m3u8_url.split('?')[0]
	m3u8_url4500 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","4500.mp4.m3u8").replace("pc","4500.m3u8")
	m3u8_url3000 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","3000.mp4.m3u8").replace("pc","3000.m3u8")
	m3u8_url2400 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","2400.mp4.m3u8").replace("pc","2400.m3u8")
	m3u8_url1600 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","1600.mp4.m3u8").replace("pc","1600.m3u8")
	m3u8_url1200 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","1200.mp4.m3u8").replace("pc","1200.m3u8")
	m3u8_url800 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","800.mp4.m3u8").replace("pc","800.m3u8")
	m3u8_url400 = m3u8_url.replace("adaptive","http").replace(":443","").replace("pc.mp4","400.mp4.m3u8").replace("pc","400.m3u8")
	
	if bitrate == '4500':
		try:
			headers = HTTP.Request(m3u8_url4500).headers
			return IndirectResponse(VideoClipObject, key = m3u8_url4500)	
		except:
			return IndirectResponse(VideoClipObject, key = m3u8_url3000)	
	elif bitrate == '3000':
		return IndirectResponse(VideoClipObject, key = m3u8_url3000)
	elif bitrate == '2400':
		return IndirectResponse(VideoClipObject, key = m3u8_url2400)
	elif bitrate == '1600':
		return IndirectResponse(VideoClipObject, key = m3u8_url1600)
	elif bitrate == '1200':
		return IndirectResponse(VideoClipObject, key = m3u8_url1200)
	elif bitrate == '800':
		return IndirectResponse(VideoClipObject, key = m3u8_url800)
	elif bitrate == '400':
		return IndirectResponse(VideoClipObject, key = m3u8_url400)
	
####################################################################################################
# Can not get 2009-2011 games or some preseason games in 2012 to work as there is no m3u8 file but may come back to this another time.